Feature: Test Ramen API from the command line.

  Test basic interactions with the API over HTTP.

  Background:
    Given the whole gang is started
    And a file test.ramen with content
      """
      define color_of_the_day as
        select sum globally 1 as start, start as stop, random as v,
               u64(start) % 2 = 1 as odd,
               case when random > 0.66 then "blue"
                    when random > 0.50 then "red"
                    else "green"
               end as color,
               case when random > 0.5 then 42 end as nullable_42
        every 1 second
        factor color;

      define random_walk as
        from (yield (sum globally 1) % 10 as seq_key every 1 second)
        select sum globally 1 as start, start + 1s as stop,
               seq_key as key,
               (previous.xyz |? 0) + (random*2-1) as xyz
        group by seq_key;
      """
    And test.ramen is compiled
    And the program test is running

  Scenario: Can get the version number from the API.
    Given ramen httpd --url http://localhost:8042 --api is started
    When I wait 1 second
    And I run curl with arguments --data-binary '{"method":"version","id":"123"}' http://localhost:8042
    Then curl must mention ""result":"v@PACKAGE_VERSION@""
    And curl must mention ""id":"123"".

  Scenario: Api can be given its own path on top of server path.
    Given ramen httpd --url http://localhost:8042/ramen --api=api is started
    When I wait 1 second
    And I run curl with arguments --data-binary '{"method":"version","id":"123"}' http://localhost:8042/ramen/api
    Then curl must mention ""result":"v@PACKAGE_VERSION@""
    And curl must mention ""id":"123"".

  Scenario: Api would understand an integer id.
    Given ramen httpd --url http://localhost:8042 --api is started
    When I wait 1 second
    And I run curl with arguments --data-binary '{"method":"version","id":123}' http://localhost:8042
    Then curl must mention ""id":123".

  Scenario: Api would understand a float id.
    Given ramen httpd --url http://localhost:8042 --api is started
    When I wait 1 second
    And I run curl with arguments --data-binary '{"method":"version","id":12.3}' http://localhost:8042
    Then curl must mention ""id":12.3".

  Scenario: Can get the list of tables.
    Given ramen httpd --url http://localhost:8042 --api is started
    When I wait 1 second
    And I run curl with arguments --data-binary '{"method":"get-tables","id":1,"params":{"prefix":"test/rand"}}' http://localhost:8042
    Then curl must mention "random_walk".

  Scenario: Can get the list of columns.
    Given ramen httpd --url http://localhost:8042 --api is started
    When I wait 1 second
    And I run curl with arguments --data-binary '{"method":"get-columns","id":1,"params":["test/color_of_the_day"]}' http://localhost:8042
    Then curl must mention "odd"
    And curl must mention "color".
    And curl must not mention ""group-key":true"

  Scenario: random_walk table must mention key as a group_key
    Given ramen httpd --url http://localhost:8042 --api is started
    When I wait 1 second
    And I run curl with arguments --data-binary '{"id":1, "method":"get-columns", "params":["test/random_walk"]}' http://localhost:8042
    Then curl must mention ""group-key":true"

  Scenario: Can get some time series.
    And ramen httpd --url http://localhost:8042 --api is started
    When I wait 3 seconds
    And I run curl with arguments --data-binary '{"method":"get-timeseries","id":1,"params":{"since":0,"until":9999999999,"num-points":5,"data":{"test/random_walk":{"select":["x"],"where":[{"lhs":"t","op":">=","rhs":"0"}]}}}}' http://localhost:8042
    Then curl must mention "xyz"

  Scenario: Can set an alert.
    Given ramen httpd --url http://localhost:8042 --api is started
    When I wait 1 second
    And I run curl with arguments --data-binary '{"method":"set-alerts","id":1,"params":{"test/random_walk":{"xyz":[{"threshold":42,"recovery":37,"id":"glop","desc-firing":"boum!"}]}}}' http://localhost:8042
    Then curl must mention ""result":null"

  Scenario: An empty set-alerts must return a valid JSON (non-regression)
    Given ramen httpd --url http://localhost:8042 --api is started
    When I wait 1 second
    And I run curl with arguments --data-binary '{"method":"set-alerts","id":1,"params":{}}' http://localhost:8042
    Then curl must mention ""result":null" on stdout

  Scenario: Alerting must work on a nullable field
    Given ramen httpd --url http://localhost:8042 --api is started
    When I wait 1 second
    And I run curl with arguments --data-binary '{"id":1, "method":"set-alerts", "params":{"test/color_of_the_day":{"nullable_42":[{"enabled":true,"id":"xyz","threshold":40,"recovery":37}]}}}' http://localhost:8042
    Then curl must mention ""result":null"

  Scenario: Query with empty where filter must be accepted
    Given ramen httpd --url http://localhost:8042 --api is started
    When I wait 1 second
    And I run curl with arguments --data-binary '{"id":1, "method":"set-alerts", "params":{"test/color_of_the_day":{"nullable_42":[{"enabled":true,"id":"xyz","threshold":200,"recovery":100,"duration":0,"ratio":1,"where":[],"desc-firing":"x","desc-recovery":"y","desc-title":"t"}]}}}' http://localhost:8042
    Then curl must mention ""result":null"

  Scenario: Another example with a having clause:
    Given ramen httpd --url http://localhost:8042 --api is started
    When I wait 1 second
    And I run curl with arguments --data-binary '{"id":1, "method":"set-alerts", "params":{"test/color_of_the_day":{"nullable_42":[{"enabled":true,"id":"xyz","threshold":200,"recovery":100,"duration":0,"where":[],"desc-firing":"x","desc-recovery":"y"}]}}}' http://localhost:8042
    Then curl must mention ""result":null"

  Scenario: If a field is misspelled then it must be mentioned in the error
    Given ramen httpd --url http://localhost:8042 --api is started
    When I wait 1 second
    And I run curl with arguments --data-binary '{"id":1, "method":"set-alerts", "params":{"test/color_of_the_day":{"nullable_42":[{"enapled":true,"threshold":200,"recovery":100}]}}}' http://localhost:8042
    Then curl must mention "'enapled'"

  Scenario: time-step can replace num-points in get-timeseries.
    And ramen httpd --url http://localhost:8042 --api is started
    When I wait 3 seconds
    And I run curl with arguments --data-binary '{"method":"get-timeseries","id":1,"params":{"since":0,"until":9,"time-step":60,"data":{"test/random_walk":{"select":["xyz","key"],"where":[{"lhs":"key","op":">=","rhs":"0"}]}}}}' http://localhost:8042
    # We are going to use a single bucket between 0 and 60, and by default the times are the end times for the API:
    Then curl must mention ""times":[60.0]"

  Scenario: I run an healthcheck without any services
     Given I run ramen with arguments health
     Then ramen must mention "httpd: WRONG"
     Then ramen must mention "tunneld: WRONG"
     Then ramen must exit with status 256

  Scenario: I run an healthcheck with only httpd running service
     Given ramen httpd --url http://localhost:8042 --api is started
     And I wait 3 seconds
     And I run ramen with arguments health
     Then ramen must mention "httpd: OK"
     Then ramen must mention "tunneld: WRONG"
     Then ramen must exit with status 256

  Scenario: I run an healthcheck to check only http service with only httpd running service
     Given ramen httpd --url http://localhost:8042 --api is started
     And I wait 3 seconds
     And I run ramen with arguments health --httpd
     Then ramen must mention "httpd: OK"
     Then ramen must not mention "tunneld: WRONG"
     Then ramen must exit with status 0
