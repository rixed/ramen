#!/bin/bash

set -e

# ENV parameters:
#  - WG_ADDRESS and WG_PRIVKEY for the VPN (optional)
#  - CONFSERVER_PRIVKEY and CONFSERVER_PUBKEY will set an admin user using
#    those keys (optional)

check_env() {
  p="$1"
  eval v=\$$p
  if test -z "$v"; then
    echo "Set $p environment parameter!"
    exit 1
  fi
}

if test -n "$WG_ADDRESS"; then
  check_env WG_PRIVKEY

  wireguard_conf="/etc/wireguard/wgnet0.conf"
  sed -e "s,@@ADDRESS@@,$WG_ADDRESS," -e "s,@@PRIVKEY@@,$WG_PRIVKEY," \
    < $wireguard_conf".tmpl" > $wireguard_conf
fi

flags=()
gc_flags=()
archivist_flags=()
alerter_flags=()
httpd_flags=()
supervisor_flags=()
confserver_flags=()
precompserver_flags=()
execompserver_flags=()
choreographer_flags=()
replay_service_flags=()
services="gc,archivist,alerter,httpd,supervisor,precompserver,execompserver,choreographer,replayer"

# When deploying this image for a multisite installation we want only
# one of the images to run the confserver, with a relatively secure default
# configuration.
# But when we run this image for evaluating/demo purpose then we want it to
# be easy to connect with a default admin user.
# We rely on envvars to tell the difference between:
# - multi-site master instance: when CONFSERVER_PRIVKEY is set;
# - multi-site slave instance: when CONFSERVER_PRIVKEY is empty but
#   CONFSERVER_PUBKEY is set;
# - mono-site evaluation: when neither CONFSERVER_PRIVKEY or CONFSERVER_PUBKEY
#   is set.

INSECURE_BIND_ADDR=127.0.0.1
if test -n "$CONFSERVER_PRIVKEY"; then
  # Multi-site master
  check_env CONFSERVER_PUBKEY
  echo "$CONFSERVER_PRIVKEY" > /ramen/confserver/private_key
  chmod 0400 /ramen/confserver/private_key
  echo "$CONFSERVER_PUBKEY"  > /ramen/confserver/public_key
  chmod 0444 /ramen/confserver/public_key
  # Create a default admin user with some secret key:
  mkdir -p /ramen/confserver/users
  cat > /ramen/confserver/users/rixed << EOF
  { roles = [ Admin ] ;
    clt_pub_key = "qfm*mEpTD^+b#LwRR9TP(v[T/IJqc-I+:8G5=k#Y" }
EOF
  services="$services,confserver"
elif test -n "$CONFSERVER_PUBKEY"; then
  # Multi-site slave
  # Nothing to do
  true
else
  # Mono-site, demo version
  # Create an admin user with no key
  echo "WARNING: DEMO VERSION WILL BIND * AND AUTH EVERYONE AS ADMIN"
  mkdir -p /ramen/confserver/users
  cat > /ramen/confserver/users/rixed << EOF
  { roles = [ Admin ] ; clt_pub_key = "" }
EOF
  INSECURE_BIND_ADDR=*
  services="$services,confserver"
fi

 must_run() {
  echo $services | grep -q -w "$1"
}

# Special argument to not load this stuff:

while test -n "$1" ; do case "$1" in
  (--debug)
    flags+=('--debug')
    shift ;;
  (--gc-*)
    gc_flags+=('--'$(echo $1 | cut -c 6-))
    shift ;;
  (--archivist-*)
    archivist_flags+=('--'$(echo $1 | cut -c 13-))
    shift ;;
  (--alerter-*)
    alerter_flags+=('--'$(echo $1 | cut -c 12-))
    shift ;;
  (--httpd-*)
    httpd_flags+=('--'$(echo $1 | cut -c 9-))
    shift ;;
  (--supervisor-*)
    supervisor_flags+=('--'$(echo $1 | cut -c 14-))
    shift ;;
  (--confserver-*)
    confserver_flags+=('--'$(echo $1 | cut -c 14-))
    shift ;;
  (--precompserver-*)
    precompserver_flags+=('--'$(echo $1 | cut -c 17-))
    shift ;;
  (--execompserver-*)
    execompserver_flags+=('--'$(echo $1 | cut -c 17-))
    shift ;;
  (--choreographer-*)
    choreographer_flags+=('--'$(echo $1 | cut -c 17-))
    shift ;;
  (--replayer-*)
    replay_service_flags+=('--'$(echo $1 | cut -c 18-))
    shift ;;
  (--services)
    services="$1"
    shift ;;
  (*)
    echo "Cannot parse $1"
    exit 1 ;;
esac ; done

if test -n "$WG_ADDRESS"; then
  echo "Starting Wireguard VPN"
  # Start the VPN
  WG_QUICK_USERSPACE_IMPLEMENTATION=boringtun wg-quick up wgnet0
fi

OCAMLRUNPARAM=b
export OCAMLRUNPARAM

if must_run confserver; then
  if test -n "$WG_ADDRESS"; then
    ramen confserver --stdout --prefix-log-with-name --insecure "$INSECURE_BIND_ADDR:29340" --secure '*':29341 ${flags[*]} ${confserver_flags[*]} --insecure wgnet0:29340 &
  else
    ramen confserver --stdout --prefix-log-with-name --insecure "$INSECURE_BIND_ADDR:29340" --secure '*':29341 ${flags[*]} ${confserver_flags[*]} &
  fi
fi
if must_run choreographer; then
  ramen choreographer --stdout --prefix-log-with-name ${flags[*]} ${choreographer_flags[*]} &
fi
if must_run precompserver; then
  ramen precompserver --stdout --prefix-log-with-name ${flags[*]} ${precompserver_flags[*]} &
fi
if must_run execompserver; then
  ramen execompserver --stdout --prefix-log-with-name ${flags[*]} ${execompserver_flags[*]} &
fi
if must_run gc; then
  ramen gc --stdout --prefix-log-with-name --loop ${flags[*]} ${gc_flags[*]} &
fi
if must_run archivist; then
  ramen archivist --stdout --prefix-log-with-name --loop --allocs --reconf ${flags[*]} ${archivist_flags[*]} &
fi
if must_run alerter; then
  ramen alerter --stdout --prefix-log-with-name ${flags[*]} ${alerter_flags[*]} &
fi
if must_run httpd; then
  ramen httpd --stdout --prefix-log-with-name --url=http://127.0.0.1:29380/ --api=api/v1 --graphite ${flags[*]} ${httpd_flags[*]} &
fi
if must_run supervisor; then
  ramen supervisor --stdout --prefix-log-with-name ${flags[*]} ${supervisor_flags[*]} &
fi
if must_run replayer; then
  ramen replayer --stdout --prefix-log-with-name ${flags[*]} ${replay_service_flags[*]} &
fi

wait

# Avoid deadlooping too hard:
sleep 2
