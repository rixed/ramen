# vim: ft=make
# Regroup in this file every file generation that depends on the makefile itself,
# in order to limit spurious rebuilds

debian.control: make.inc
	@echo 'Building $@'
	@echo 'Package: @PACKAGE_NAME@' > $@
	@echo 'Version: @PACKAGE_VERSION@' >> $@
	@echo 'Architecture: $(shell dpkg-architecture -qDEB_BUILD_ARCH)' >> $@
	@echo 'Maintainer: rixed-github@happyleptic.org' >> $@
	@echo 'Depends: g++, gcc, libblas-dev, liblapack-dev, libsasl2-dev, libssl-dev, libsqlite3-0' >> $@
	@echo 'Conflicts: libopenblas-base' >> $@
	@echo 'Description: Event processor tailored for human-scale monitoring' >> $@

src/country_of_ip/db_v4.c: IpToCountry.csv make.inc
	@echo 'Generating $@'
	@echo '/* Generated by Makefile - edition is futile */' > $@
	@echo >> $@
	@echo '#include "db.h"' >> $@
	@echo 'struct db_entry_v4 db_v4[] = {' >> $@
	@sed -ne 's/^ *"\([0-9]\+\)","\([0-9]\+\)",.*,\(".."\),"[^"]*","[^"]*" *$$/  { \1, \2, \3 },/p' < $< >> $@
	@echo '};' >> $@

src/country_of_ip/db_v4.h: src/country_of_ip/db_v4.c make.inc
	@echo 'Generating $@'
	@echo '/* Generated by Makefile - edition is futile */' > $@
	@echo '#ifndef DB_V4_h_200417' >> $@
	@echo '#define DB_V4_h_200417' >> $@
	@echo '#include "db.h"' >> $@
	@echo >> $@
	@echo 'extern struct db_entry_v4 db_v4[' $$(grep -c '^  {' $<) '];' >> $@
	@echo >> $@
	@echo '#endif' >> $@

src/country_of_ip/db_v6.c: IpToCountry.6R.csv tools/ipcsv.opt make.inc
	@echo '/* Generated by Makefile - edition is futile */' > $@
	tools/ipcsv.opt $< >> $@

src/country_of_ip/db_v6.h: src/country_of_ip/db_v6.c make.inc
	@echo 'Generating $@'
	@echo '/* Generated by Makefile - edition is futile */' > $@
	@echo '#ifndef DB_V6_h_200417' >> $@
	@echo '#define DB_V6_h_200417' >> $@
	@echo '#include "db.h"' >> $@
	@echo >> $@
	@echo 'extern struct db_entry_v6 db_v6[' $$(grep -c '^  {' $<) '];' >> $@
	@echo >> $@
	@echo '#endif' >> $@

META: make.inc
	@echo 'Building findlib configuration (META) for Ramen'
	@echo 'description = "Event processor tailored for human-scale monitoring"' > $@
	@echo 'version = "$(VERSION)"' >> $@
	@echo 'archive(native) = "codegen.cmxa"' >> $@
	@echo 'requires = "$(META_REQUIRES)"' >> $@

# embedded compiler version: build a bundle of all libraries
OCAML_WHERE = $(shell dirname $(shell ocamlfind ocamlc -where))
# cut -c X- means to takes all from X, 1st char being 1, thus the leading _:
OCAML_WHERE_LEN = $(shell printf '_%s/' $(OCAML_WHERE) | wc -m | xargs echo)

# This won't work before ramen is installed so that ocamlfind knows its
# dependencies..
# Bootstrapping this is a bit special as ocamlfind needs to know the ramen
# package first. Therefore this file is included with the source package for
# simplicity.
src/RamenDepLibs.ml.frominst: $(OCAML_WHERE)/ramen/META
	@echo '(* Generated by Makefile - edition is futile *)' > $@
	@echo 'module N = RamenName' >> $@
	@echo 'let incdirs = [' >> $@
	set -e ; for d in $$(ocamlfind query -recursive -predicates native,mt -format '%d' ramen | sort -u | grep -v -e compiler-libs -e ppx_tools -e /findlib) ; do \
	  echo $$d | cut -c $(OCAML_WHERE_LEN)- | \
	  sed -e 's,^\(.*\)$$,  N.path "\1" ;,' >> $@ ;\
	done ;
# Equivalent to -threads:
	@echo '  N.path "ocaml/threads" ;' >> $@
	@echo ']' >> $@
	@echo 'let objfiles = [' >> $@
	set -e ; for d in $$(ocamlfind query -recursive -predicates native,mt -format '%+a' ramen | uniq | grep -v -e compiler-libs -e ppx_tools -e /findlib) ; do \
	  echo $$d | cut -c $(OCAML_WHERE_LEN)- | \
	  sed -e 's,^\(.*\)$$,  N.path "\1" ;,' >> $@ ;\
	done ;
	@echo ']' >> $@
# Equivalent to -threads, must come right after unix.cmxa:
	sed -i -e '/ocaml\/unix.cmxa/a \ \ N.path "ocaml/threads/threads.cmxa" ;' $@
	@if test -e $(OCAML_WHERE)/ramen/META.for_bootstrap ; then \
	  rm $(OCAML_WHERE)/ramen/META ;\
	  rm $(OCAML_WHERE)/ramen/META.for_bootstrap ;\
	fi

$(OCAML_WHERE)/ramen/META: META
	@echo "It seems ramen is not yet installed, bootstrapping ocamlfind..."
	mkdir -p $(OCAML_WHERE)/ramen
	cp META $@
	touch $@.for_bootstrap

src/RamenDepLibs.ml: src/RamenDepLibs.ml.frominst make.inc
ifeq ($(shell uname),Darwin)
	sed -e '/inotify/d' $< > $@
else
	cp $< $@
endif

src/RamenCompilConfig.ml: make.inc
	@echo '(* Generated by Makefile - edition is futile *)' > $@
	@echo 'module N = RamenName' >> $@
	@echo 'let default_bundle_dir = N.path "$(abspath $(lib_dir))/$(BUNDLE_DIR)/"' >> $@
	@echo 'let ocaml_version = "@OCAMLVERSION@"' >> $@
	@echo 'let build_path = "$(PATH)"' >> $@
	@echo 'let ocamlfind = N.path "@OCAMLFIND@"' >> $@
	@echo 'let ocamlpath = "$(OCAMLPATH)"' >> $@
	@echo 'let cpp_compiler = "@CXX@"' >> $@
	@echo 'let z3_path = "@Z3@"' >> $@
	@echo 'let build_date = "$(shell date -R)"' >> $@
	@echo 'let build_host = "$(shell hostname)"' >> $@

src/RamenSourceExamples.ml: \
		make.inc \
		examples/monitoring/network/security.ramen \
		examples/monitoring/network/hosts.ramen \
		examples/monitoring/network/traffic.ramen \
		examples/monitoring/network/minutely.pivot \
		examples/generators/network/logs.ramen \
		examples/generators/network/aggregated.ramen \
		examples/generators/network/resp_time.alert \
		examples/generators/network/errors.ramen \
		examples/generators/network/error_rate.alert \
		examples/generators/basic.ramen
	@echo 'Generating $@'
	@echo '(* Generated by Makefile - edition is futile *)' > $@
	@echo >> $@
	@echo 'module Monitoring = struct' >> $@
	@echo '  module Network = struct' >> $@
	@echo '    let security = {|' >> $@
	cat examples/monitoring/network/security.ramen >> $@
	@echo '|}' >> $@
	@echo >> $@
	@echo '    let hosts = {|' >> $@
	cat examples/monitoring/network/hosts.ramen >> $@
	@echo '|}' >> $@
	@echo >> $@
	@echo '    let traffic = {|' >> $@
	cat examples/monitoring/network/traffic.ramen >> $@
	@echo '|}' >> $@
	@echo '    let minutely = {|' >> $@
	cat examples/monitoring/network/minutely.pivot >> $@
	@echo '|}' >> $@
	@echo >> $@
	@echo '  end' >> $@
	@echo 'end' >> $@
	@echo >> $@
	@echo 'module Generators = struct' >> $@
	@echo '  module Network = struct' >> $@
	@echo '    let logs = {|' >> $@
	cat examples/generators/network/logs.ramen >> $@
	@echo '|}' >> $@
	@echo >> $@
	@echo '    let aggregated = {|' >> $@
	cat examples/generators/network/aggregated.ramen >> $@
	@echo '|}' >> $@
	@echo >> $@
	@echo '    let resp_time_alert = {|' >> $@
	cat examples/generators/network/resp_time.alert >> $@
	@echo '|}' >> $@
	@echo '    let errors = {|' >> $@
	cat examples/generators/network/errors.ramen >> $@
	@echo '|}' >> $@
	@echo >> $@
	@echo '    let error_rate_alert = {|' >> $@
	cat examples/generators/network/error_rate.alert >> $@
	@echo '|}' >> $@
	@echo '  end' >> $@
	@echo >> $@
	@echo '  let basic = {|' >> $@
	@cat examples/generators/basic.ramen >> $@
	@echo '|}' >> $@
	@echo 'end' >> $@
	sed -i -e ':x /{|$$/{N;s/\n//g; bx}' $@
